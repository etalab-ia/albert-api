name: opengatellm-ci

services:
  api:
    build:
      context: ..
      dockerfile: app/Dockerfile
    restart: always
    env_file: "${APP_ENV_FILE:-.env.ci}"
    volumes:
      - ../scripts/generate_configuration_documentation.py:/scripts/generate_configuration_documentation.py:ro
    ports:
      - 8080:8000
    environment:
      - "ALBERT_API_KEY=${ALBERT_API_KEY}"
      - "BRAVE_API_KEY=${BRAVE_API_KEY}"
      - "COVERAGE_RCFILE=./app/.coveragerc"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy

  postgres:
    extends:
      file: ../compose.example.yml
      service: postgres

  redis:
    extends:
      file: ../compose.example.yml
      service: redis

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:9.0.2
    restart: always
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - "ELASTIC_USERNAME=${ELASTICSEARCH_USER:-elastic}"
      - "ELASTIC_PASSWORD=${ELASTICSEARCH_PASSWORD:-changeme}"
    volumes:
      - elasticsearch:/usr/share/elasticsearch/data
    healthcheck:
      test: [ "CMD-SHELL", "bash", "-c", ":> /dev/tcp/127.0.0.1/9200" ]
      interval: 4s
      timeout: 10s
      retries: 5

  secretiveshell:
    image: ghcr.io/etalab-ia/albert-api-mcp-bridge/albert-api-mcp-bridge:latest
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: always
    ports:
      - "${SECRETIVESHELL_PORT:-8000}:8000"
    environment:
      - MCP_BRIDGE__CONFIG__FILE=config.json
    volumes:
      - .github/mcp_config.ci.json:/mcp_bridge/config.json

volumes:
  postgres:
  redis:
  elasticsearch: